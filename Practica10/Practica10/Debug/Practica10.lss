
Practica10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800200  00000204  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800318  00800318  000003b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fae  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d4d  00000000  00000000  00001456  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f4  00000000  00000000  000021a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00002b98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008f7e  00000000  00000000  00002c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  0000bbee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000bc44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000370f  00000000  00000000  0000bc9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	73 c0       	rjmp	.+230    	; 0x13c <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e0       	ldi	r30, 0x04	; 4
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 31       	cpi	r26, 0x18	; 24
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a8 e1       	ldi	r26, 0x18	; 24
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 31       	cpi	r26, 0x1B	; 27
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	57 d0       	rcall	.+174    	; 0x1ce <main>
 120:	6f c0       	rjmp	.+222    	; 0x200 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Timer0_Ini>:
	/*	Agregar las instrucciones necesarias para reproducir
		la siguiente nota en el arreglo dependiendo de la duración, 
		e insertar los silencios entre cada nota. */
}

void Timer2_Freq_Gen(uint8_t ticks){
 124:	16 bc       	out	0x26, r1	; 38
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	84 bd       	out	0x24, r24	; 36
 12a:	93 e0       	ldi	r25, 0x03	; 3
 12c:	95 bd       	out	0x25, r25	; 37
 12e:	99 ef       	ldi	r25, 0xF9	; 249
 130:	97 bd       	out	0x27, r25	; 39
 132:	85 bb       	out	0x15, r24	; 21
 134:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 138:	78 94       	sei
 13a:	08 95       	ret

0000013c <__vector_21>:
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
 14c:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <__data_end>
 150:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <__data_end+0x1>
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	88 3e       	cpi	r24, 0xE8	; 232
 158:	23 e0       	ldi	r18, 0x03	; 3
 15a:	92 07       	cpc	r25, r18
 15c:	29 f0       	breq	.+10     	; 0x168 <__vector_21+0x2c>
 15e:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <__data_end+0x1>
 162:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <__data_end>
 166:	09 c0       	rjmp	.+18     	; 0x17a <__vector_21+0x3e>
 168:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <__data_end+0x1>
 16c:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <__data_end>
 170:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <SecFlag>
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <SecFlag>
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <Timer2_Play>:
		De lo contrario se requiere deshabilitar el Generador, generando de 
		esta forma el silencio (0 lógico). */
}

void Timer2_Play(const struct note song[], unsigned int len)
{
 18a:	08 95       	ret

0000018c <Timer2_Volume>:
	/*	Función que establece las condiciones necesarias para que
		el generador recorra el arreglo de notas. */
}

void Timer2_Volume(uint8_t direction){
 18c:	08 95       	ret

0000018e <UART0_AutoBaudRate>:
#include <inttypes.h>
#include <avr/io.h>

/*función AutoBaudRate*/
void UART0_AutoBaudRate(void){
	UCSR0A = 1<<U2X0;							/*Doble velocidad*/
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);				/*Habilitamos receptor y transmisor*/
 194:	98 e1       	ldi	r25, 0x18	; 24
 196:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C= (3<<UCSZ00);						/*Estableecemos el formato*/
 19a:	96 e0       	ldi	r25, 0x06	; 6
 19c:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	TCCR0A = 0x00;								/*Timer 0: Modo normal*/
 1a0:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 2<<CS00;							/*Preescalador: 8*/
 1a2:	85 bd       	out	0x25, r24	; 37
	while(PINE&(1<<PE0));
 1a4:	60 99       	sbic	0x0c, 0	; 12
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <UART0_AutoBaudRate+0x16>
	TCNT0 = 0;
 1a8:	16 bc       	out	0x26, r1	; 38
	while(!(PINE&(1<<PE0))){
 1aa:	60 9b       	sbis	0x0c, 0	; 12
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <UART0_AutoBaudRate+0x1c>
	}
	TCCR0B = 0x00;
 1ae:	15 bc       	out	0x25, r1	; 37
	UBRR0 = TCNT0-1;
 1b0:	86 b5       	in	r24, 0x26	; 38
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 1ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 1be:	08 95       	ret

000001c0 <UART0_getchar>:
}

/*Función que retorna el byte recibido por el puerto serie UART0*/
uint8_t UART0_getchar(void){
	while(!(UCSR0A&(1<<UDRE0)))
 1c0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 1c4:	85 fd       	sbrc	r24, 5
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <UART0_getchar+0xc>
	return UDRE0;
 1c8:	85 e0       	ldi	r24, 0x05	; 5
 1ca:	08 95       	ret
 1cc:	08 95       	ret

000001ce <main>:


int main(void)
{
	//UART0_Ini();
	UART0_AutoBaudRate();
 1ce:	df df       	rcall	.-66     	; 0x18e <UART0_AutoBaudRate>
 1d0:	a9 df       	rcall	.-174    	; 0x124 <Timer0_Ini>
 1d2:	f6 df       	rcall	.-20     	; 0x1c0 <UART0_getchar>
 1d4:	86 35       	cpi	r24, 0x56	; 86
 1d6:	59 f0       	breq	.+22     	; 0x1ee <main+0x20>
 1d8:	18 f4       	brcc	.+6      	; 0x1e0 <main+0x12>
 1da:	80 35       	cpi	r24, 0x50	; 80
 1dc:	59 f0       	breq	.+22     	; 0x1f4 <main+0x26>
 1de:	f9 cf       	rjmp	.-14     	; 0x1d2 <main+0x4>
 1e0:	80 37       	cpi	r24, 0x70	; 112
 1e2:	41 f0       	breq	.+16     	; 0x1f4 <main+0x26>
 1e4:	86 37       	cpi	r24, 0x76	; 118
 1e6:	a9 f7       	brne	.-22     	; 0x1d2 <main+0x4>
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	d0 df       	rcall	.-96     	; 0x18c <Timer2_Volume>
 1ec:	f2 cf       	rjmp	.-28     	; 0x1d2 <main+0x4>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	cd df       	rcall	.-102    	; 0x18c <Timer2_Volume>
 1f2:	ef cf       	rjmp	.-34     	; 0x1d2 <main+0x4>
 1f4:	66 e4       	ldi	r22, 0x46	; 70
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	92 e0       	ldi	r25, 0x02	; 2
 1fc:	c6 df       	rcall	.-116    	; 0x18a <Timer2_Play>
 1fe:	e9 cf       	rjmp	.-46     	; 0x1d2 <main+0x4>

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
